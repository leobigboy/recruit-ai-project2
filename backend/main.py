import os
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
from openai import OpenAI
import logging
import json
import PyPDF2
import io

# =========================================
# Load environment
# =========================================
load_dotenv()
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå Thi·∫øu OpenRouter API key trong file .env")

# ‚úÖ Kh√¥ng log key th·∫≠t ra console
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
logger.info("üîí OpenRouter API key loaded (·∫©n trong log).")

# Kh·ªüi t·∫°o client OpenRouter an to√†n
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
    default_headers={
        "HTTP-Referer": "http://localhost:5173",  # T√™n app c·ªßa anh
        "X-Title": "Recruit AI CV Parser"
    }
)

app = FastAPI(title="CV Parser API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =========================================
# Helper: ƒê·ªçc PDF
# =========================================
def extract_text_from_pdf(content: bytes) -> str:
    """Tr√≠ch xu·∫•t text t·ª´ PDF bytes"""
    try:
        pdf_file = io.BytesIO(content)
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"

        if text.strip():
            return text

        return content.decode("utf-8", errors="ignore")
    except Exception as e:
        logger.warning(f"L·ªói ƒë·ªçc PDF: {e}, fallback sang UTF-8")
        return content.decode("utf-8", errors="ignore")

# =========================================
# Route ki·ªÉm tra server
# =========================================
@app.get("/health")
def health_check():
    return {"status": "healthy", "model_loaded": True}

# =========================================
# Route parse 1 CV
# =========================================
@app.post("/api/parse-cv")
async def parse_cv(file: UploadFile = File(...)):
    try:
        content = await file.read()

        # ‚úÖ X·ª≠ l√Ω PDF ƒë√∫ng c√°ch
        if file.filename.lower().endswith('.pdf'):
            text = extract_text_from_pdf(content)
        else:
            text = content.decode("utf-8", errors="ignore")

        logger.info(f"üìÑ ƒê·ªçc ƒë∆∞·ª£c {len(text)} k√Ω t·ª± t·ª´ {file.filename}")

        if not text or len(text.strip()) < 50:
            raise HTTPException(status_code=400, detail="File tr·ªëng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung")

        prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch CV. H√£y ƒë·ªçc k·ªπ CV sau v√† tr√≠ch xu·∫•t th√¥ng tin CH√çNH X√ÅC.

QUAN TR·ªåNG: 
- N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, ƒë·ªÉ tr·ªëng "" thay v√¨ "N/A"
- Skills ph·∫£i l√† array c√°c string
- Tr·∫£ v·ªÅ ƒê√öNG ƒë·ªãnh d·∫°ng JSON, kh√¥ng th√™m markdown ```json

Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
{{
  "name": "t√™n ·ª©ng vi√™n",
  "email": "email",
  "phone": "s·ªë ƒëi·ªán tho·∫°i",
  "address": "ƒë·ªãa ch·ªâ",
  "skills": ["skill1", "skill2", "skill3"],
  "experience": "kinh nghi·ªám l√†m vi·ªác",
  "education": "h·ªçc v·∫•n",
  "university": "t√™n tr∆∞·ªùng"
}}

CV Content:
{text[:4000]}
"""

        response = client.chat.completions.create(
            model="openai/gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.1,
        )

        result_text = response.choices[0].message.content.strip()
        logger.info("ü§ñ GPT response nh·∫≠n th√†nh c√¥ng (·∫©n n·ªôi dung trong log ƒë·ªÉ b·∫£o m·∫≠t).")

        # Parse JSON
        try:
            if result_text.startswith("```json"):
                result_text = result_text.replace("```json", "").replace("```", "").strip()
            elif result_text.startswith("```"):
                result_text = result_text.replace("```", "").strip()

            parsed_json = json.loads(result_text)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Cannot parse JSON: {e}")
            parsed_json = {}

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        def safe_get(field, default=""):
            return parsed_json.get(field, default) if parsed_json else default

        name = safe_get("name")
        email = safe_get("email")
        phone = safe_get("phone")
        address = safe_get("address")
        skills = safe_get("skills", [])
        experience = safe_get("experience")
        education = safe_get("education")
        university = safe_get("university")

        if isinstance(skills, str):
            skills = [s.strip() for s in skills.split(",") if s.strip()]

        return {
            "success": True,
            "data": {
                "name": name,
                "email": email,
                "phone": phone,
                "address": address,
                "skills": skills,
                "experience": experience,
                "education": education,
                "university": university,
                "fullText": text[:1000],
                "parseQuality": "good",
            },
            "metadata": {
                "tokens_count": getattr(response, "usage", {}).get("total_tokens", None),
                "confidence": 0.85,
                "model": "openai/gpt-4o"
            }
        }

    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω CV: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω CV: {str(e)}")

# =========================================
# Route parse nhi·ªÅu CV
# =========================================
@app.post("/api/batch-parse-cv")
async def batch_parse_cv(files: list[UploadFile]):
    results = []
    for file in files:
        try:
            parsed = await parse_cv(file)
            results.append({
                "filename": file.filename,
                "success": True,
                "data": parsed["data"]
            })
        except Exception as e:
            results.append({
                "filename": file.filename,
                "success": False,
                "error": str(e)
            })
    return {"results": results}

# =========================================
# Ch·∫°y server
# =========================================
if __name__ == "__main__":
    import uvicorn
    logger.info("‚úÖ OpenRouter client kh·ªüi t·∫°o an to√†n.")
    uvicorn.run(app, host="0.0.0.0", port=8000)
